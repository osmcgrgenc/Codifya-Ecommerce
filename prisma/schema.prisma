// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  CUSTOMER_SERVICE
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  phone         String?   @unique

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  ProductSeller ProductSeller[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String? // Marka logosu URL’si
  country     String? // Marka menşei
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ProductSeller {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  sellerId  String
  seller    User     @relation(fields: [sellerId], references: [id])
  price     Decimal
  stock     Int      @default(0)
  rating    Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, sellerId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Float
  discount    Float?
  stock       Int      @default(0)
  featured    Boolean  @default(false)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
  variations Variation[]
  seller     ProductSeller[]
  images     ProductImage[]

  metaTitle       String?
  metaDescription String?
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, isMain])
}

model Variation {
  id              String            @id @default(cuid())
  productId       String
  product         Product           @relation(fields: [productId], references: [id])
  name            String?
  sku             String            @unique
  price           Decimal
  stock           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  VariationOption VariationOption[]
}

model OptionType {
  id              String            @id @default(cuid())
  name            String            @unique
  VariationOption VariationOption[]
}

model VariationOption {
  id           String     @id @default(cuid())
  variationId  String
  variation    Variation  @relation(fields: [variationId], references: [id])
  optionTypeId String
  optionType   OptionType @relation(fields: [optionTypeId], references: [id])
  value        String
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id                    String      @id @default(cuid())
  userId                String?
  user                  User?       @relation(fields: [userId], references: [id])
  status                OrderStatus @default(PENDING)
  totalAmount           Float
  shippingAddress       String?
  billingAddress        String?
  paymentId             String?
  referenceCode         String?
  notes                 String?
  items                 OrderItem[]
  trackingNumber        String?
  canceledAt            DateTime?
  estimatedDeliveryDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment Payment?
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  subtotal  Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
  method        String // Kredi Kartı, EFT, PayPal vb.
  provider      String?
  transactionId String?
  status        String   @default("PENDING") // PENDING, SUCCESS, FAILED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String  @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  approved  Boolean @default(false)
  likes     Int     @default(0)
  dislikes  Int     @default(0)
  reported  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

enum PaymentStatus {
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PENDING_PAYMENT
  PROCESSING
  SHIPPED
  DELIVERED
  PAID
  CANCELLED
}
